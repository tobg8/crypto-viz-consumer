import { useEffect, useState } from 'react';
import Highcharts from 'highcharts/highstock';
import HighchartsReact from 'highcharts-react-official';

const Chart = () => {
  const [chart, setChart] = useState(null);
  const [indicatorsPopupContainer, setIndicatorsPopupContainer] = useState(null);
  const [annotationsPopupContainer, setAnnotationsPopupContainer] = useState(null);

  useEffect(() => {
    const addPopupEvents = (chartInstance: unknown) => {
      const closePopupButtons = document.getElementsByClassName('highcharts-close-popup');

      const handleClosePopup = () => {
        this?.parentNode?.style.display = 'none';
      };

      Highcharts.addEvent(closePopupButtons[0], 'click', handleClosePopup);
      Highcharts.addEvent(closePopupButtons[1], 'click', handleClosePopup);

      Highcharts.addEvent(
        document.querySelectorAll('.highcharts-popup-indicators button')[0],
        'click',
        () => {
          const typeSelect = document.querySelectorAll('.highcharts-popup-indicators select')[0];
          const type = typeSelect.options[typeSelect.selectedIndex].value;
          const period = document.querySelectorAll('.highcharts-popup-indicators input')[0].value || 14;

          chartInstance.addSeries({
            linkedTo: 'aapl-ohlc',
            type: type,
            params: {
              period: parseInt(period, 10)
            }
          });

          indicatorsPopupContainer.style.display = 'none';
        }
      );

      Highcharts.addEvent(
        document.querySelectorAll('.highcharts-popup-annotations button')[0],
        'click',
        () => {
          const strokeWidth = parseInt(
            document.querySelectorAll('.highcharts-popup-annotations input[name="stroke-width"]')[0].value,
            10
          );
          const strokeColor = document.querySelectorAll('.highcharts-popup-annotations input[name="stroke"]')[0].value;

          if (chartInstance.currentAnnotation.options.typeOptions) {
            chartInstance.currentAnnotation.update({
              typeOptions: {
                lineColor: strokeColor,
                lineWidth: strokeWidth,
                line: {
                  strokeWidth: strokeWidth,
                  stroke: strokeColor
                },
                background: {
                  strokeWidth: strokeWidth,
                  stroke: strokeColor
                },
                innerBackground: {
                  strokeWidth: strokeWidth,
                  stroke: strokeColor
                },
                outerBackground: {
                  strokeWidth: strokeWidth,
                  stroke: strokeColor
                },
                connector: {
                  strokeWidth: strokeWidth,
                  stroke: strokeColor
                }
              }
            });
          } else {
            chartInstance.currentAnnotation.update({
              shapes: [{
                'stroke-width': strokeWidth,
                stroke: strokeColor
              }],
              labels: [{
                borderWidth: strokeWidth,
                borderColor: strokeColor
              }]
            });
          }
          annotationsPopupContainer.style.display = 'none';
        }
      );
    };

    const fetchData = async () => {
      const response = await fetch('https://demo-live-data.highcharts.com/aapl-ohlcv.json');
      const data = await response.json();
      const ohlc: string[] = [];
      const volume: string[] = [];
      const dataLength = data.length;

      for (let i = 0; i < dataLength; i += 1) {
        ohlc.push([
          data[i][0],
          data[i][1],
          data[i][2],
          data[i][3],
          data[i][4]
        ]);

        volume.push([
          data[i][0],
          data[i][5]
        ]);
      }

      setChart(() => (
        <HighchartsReact
          highcharts={Highcharts}
          constructorType={'stockChart'}
          options={{
            chart: {
              events: {
                load: function () {
                  addPopupEvents(this);
                }
              }
            },
            yAxis: [{
              labels: {
                align: 'left'
              },
              height: '80%',
              resize: {
                enabled: true
              }
            }, {
              labels: {
                align: 'left'
              },
              top: '80%',
              height: '20%',
              offset: 0
            }],
            navigationBindings: {
              events: {
                // ... (Your existing navigationBindings events)
              }
            },
            stockTools: {
              gui: {
                enabled: false
              }
            },
            series: [{
              type: 'ohlc',
              id: 'aapl-ohlc',
              name: 'AAPL Stock Price',
              data: ohlc
            }, {
              type: 'column',
              id: 'aapl-volume',
              name: 'AAPL Volume',
              data: volume,
              yAxis: 1
            }],
            responsive: {
              rules: [{
                condition: {
                  maxWidth: 800
                },
                chartOptions: {
                  rangeSelector: {
                    inputEnabled: false
                  }
                }
              }]
            }
          }}
        />
      ));
    };

    fetchData();
  }, [indicatorsPopupContainer, annotationsPopupContainer]);

  return (
    <div className="chart-wrapper">
      {/* ... (Your existing HTML structure) */}
      <div id="container" className="chart">
        {chart}
      </div>
    </div>
  );
};

export default Chart;
